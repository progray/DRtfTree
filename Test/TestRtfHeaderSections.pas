unit TestRtfHeaderSections;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, StrUtils, Classes, SysUtils, DateUtils, UITypes, TestRtfBase,
  RtfTree, RtfClasses;

type

  TTestRtfHeaderSections = class(TRtfTestCase)
  strict private
    FRtfTree: TRtfTree;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestFontTables;
    procedure TestColorTables;
    procedure TestStyleSheetTables;
    procedure TestInfoGroup;
  end;

implementation

procedure TTestRtfHeaderSections.SetUp;
begin
  FRtfTree := TRtfTree.Create;
  FRtfTree.LoadFromFile(AssetPath + 'testdoc2.rtf');
end;

procedure TTestRtfHeaderSections.TearDown;
begin
  FreeAndNil(FRtfTree);
end;

procedure TTestRtfHeaderSections.TestFontTables;
begin
  CheckEquals(3, FRtfTree.FontTables.Count, 'Rtf document has 3 font tables');
  CheckEquals('Times New Roman', FRtfTree.FontTables[0].FontName, 'First font is Times New Roman');
  CheckEquals('Arial', FRtfTree.FontTables[1].FontName, 'Second font is Arial');
  CheckEquals('Arial', FRtfTree.FontTables[2].FontName, 'Third font is Arial');

  CheckEquals(0, FRtfTree.FontTables.IndexOf('Times New Roman'), 'Times New Roman font is at 0');
  CheckEquals(1, FRtfTree.FontTables.IndexOf('Arial'), 'Arial font is at 1');
  CheckEquals(-1, FRtfTree.FontTables.IndexOf('nofont'), 'Non existent font is should return -1');
end;

procedure TTestRtfHeaderSections.TestColorTables;
begin
  CheckEquals(3, FRtfTree.ColorTables.Count, 'Rtf document has 3 color tables');
  CheckEquals(TColor($000000), FRtfTree.ColorTables[0].Color, 'First color is $000000');
  CheckEquals(TColor($800000), FRtfTree.ColorTables[1].Color, 'Second color is $800000');
  CheckEquals(TColor($0000FF), FRtfTree.ColorTables[2].Color, 'Third color is $0000FF');

  CheckEquals(0, FRtfTree.ColorTables.IndexOf(TColor($000000)), 'Color $000000 is at 0');
  CheckEquals(1, FRtfTree.ColorTables.IndexOf(TColor($800000)), 'Color $800000 is at 1');
  CheckEquals(2, FRtfTree.ColorTables.IndexOf(TColor($0000FF)), 'Color $0000FF is at 2');
end;

procedure TTestRtfHeaderSections.TestStyleSheetTables;
var
  StyleSheet: TRtfStyleSheet;

begin
  CheckEquals(7, FRtfTree.StyleSheets.Count, 'Rtf document has 7 style sheets');

  StyleSheet := FRtfTree.StyleSheets[FRtfTree.StyleSheets.IndexOf(0)];
  CheckEquals(0, StyleSheet.Index, 'Stylesheet index matched');
  CheckEquals(Ord(stParagraph), Ord(StyleSheet.StyleSheetType), 'Stylesheet type is stParagraph');
  CheckEquals('Normal', StyleSheet.Name, 'Stylesheet name is Normal');
  CheckEquals(0, StyleSheet.Next, 'Next stylesheet is 0');
  CheckEquals(25, StyleSheet.Formatting.Count, 'Formatting count is 25');

  StyleSheet := FRtfTree.StyleSheets[FRtfTree.StyleSheets.IndexOf(1)];
  CheckEquals(1, StyleSheet.Index, 'Stylesheet index matched');
  CheckEquals(Ord(stParagraph), Ord(StyleSheet.StyleSheetType), 'Stylesheet type is stParagraph');
  CheckEquals('heading 1', StyleSheet.Name, 'Stylesheet name is heading 1');
  CheckEquals(0, StyleSheet.Next, 'Next is 0');
  CheckEquals(0, StyleSheet.BasedOn, 'BasedOn is 0');
  CheckEquals(2310575, StyleSheet.Styrsid, 'Styrsid is 2310575');
  CheckEquals(33, StyleSheet.Formatting.Count, 'Formatting count is 33');

  StyleSheet := FRtfTree.StyleSheets[FRtfTree.StyleSheets.IndexOf(10)];
  CheckEquals(10, StyleSheet.Index, 'Stylesheet index matched');
  CheckEquals(Ord(stCharacter), Ord(StyleSheet.StyleSheetType), 'Stylesheet type is stCharacter');
  CheckEquals('Default Paragraph Font', StyleSheet.Name, 'Stylesheet name is Default Paragraph Font');
  CheckEquals(True, StyleSheet.Additive, 'Additive is True');
  CheckEquals(True, StyleSheet.SemiHidden, 'SemiHidden is True');
  CheckEquals(0, StyleSheet.Formatting.Count, 'Formatting count is 0');

  StyleSheet := FRtfTree.StyleSheets[FRtfTree.StyleSheets.IndexOf(11)];
  CheckEquals(11, StyleSheet.Index, 'Stylesheet index matched');
  CheckEquals(Ord(stTable), Ord(StyleSheet.StyleSheetType), 'Stylesheet type is stTable');
  CheckEquals('Normal Table', StyleSheet.Name, 'Stylesheet name is Normal Table');
  CheckEquals(11, StyleSheet.Next, 'Next is 11');
  CheckEquals(True, StyleSheet.SemiHidden, 'SemiHidden is True');
  CheckEquals(44, StyleSheet.Formatting.Count, 'Formatting count is 44');
end;

procedure TTestRtfHeaderSections.TestInfoGroup;
var
  Info: TRtfDocumentProperty;
begin
  Info := FRtfTree.Props;

  CheckEquals('Test NRtfTree Title', Info.Title, 'Title matched');
  CheckEquals('Test NRtfTree Subject', Info.Subject, 'Subject matched');
  CheckEquals('Sgoliver (Author)', Info.Author, 'Author matched');
  CheckEquals('test;nrtftree;sgoliver', Info.Keywords, 'Keywords matched');
  CheckEquals('This is a test comment.', Info.DocComment, 'DocComment matched');
  CheckEquals('None', Info.Operator, 'Operator Matched');
  CheckEquals(EncodeDateTime(2008, 5, 28, 18, 52, 0, 0), Info.CreationTime, 'CreationTime matched');
  CheckEquals(EncodeDateTime(2009, 6, 29, 20, 23, 0, 0), Info.RevisionTime, 'RevisionTime matched');
  CheckEquals(6, Info.Version, 'Version matched');
  CheckEquals(4, Info.EditingTime, 'EditingTime matched');
  CheckEquals(1, Info.NumberOfPages, 'NumberOfPages matched');
  CheckEquals(12, Info.NumberOfWords, 'NumberOfWords matched');
  CheckEquals(59, Info.NumberOfChars, 'NumberOfChars matched');
  CheckEquals('Sgoliver (Admin)', Info.Manager, 'Manager matched');
  CheckEquals('www.sgoliver.net', Info.Company, 'Company matched');
  CheckEquals('Demos (Category)', Info.Category, 'Category matched');
  CheckEquals(24579, Info.InternalVersion, 'InternalVersion matched');

  CheckEquals('', Info.Comment, 'Comment matched');
  CheckEquals('', Info.HLinkBase, 'HLinkBase matched');
  CheckEquals(-1, Info.Id, 'Id matched');
  CheckEquals(0, Info.LastPrintTime, 'LastPrintTime matched');
  CheckEquals(0, Info.BackupTime, 'BackupTime matched');

  Str.LoadFromFile(AssetPath + 'infogroup.txt');
  CheckEquals(Str.Text, Info.ToString, 'ToString matched');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TTestRtfHeaderSections.Suite);

end.

