unit TestRtfTreeNode;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, StrUtils, Classes, SysUtils, TestRtfBase, RtfTree;

type

  TTestRtfTreeNode = class(TRtfTestCase)
  strict private
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAddChildToEmptyNode;
    procedure TestStringRepresentation;
    procedure TestCreateText;
    procedure TestTextExtraction;
    procedure TestTextExtractionSpecial;
    procedure TestTextExtractionUnicode;
  end;

implementation

procedure TTestRtfTreeNode.SetUp;
begin
end;

procedure TTestRtfTreeNode.TearDown;
begin
end;

procedure TTestRtfTreeNode.TestAddChildToEmptyNode;
var
  Node1, Node2, Node3: TRtfTreeNode;

begin
  Node1 := TRtfTreeNode.Create;
  try
    CheckEquals(0, Node1.ChildNodes.Count, 'Newly created node should have zero child');
    Node2 := TRtfTreeNode.Create;
    Node1.ChildNodes.Insert(0, Node2);
    CheckEquals(1, Node1.ChildNodes.Count, 'Successfuly added one child');
    Check(Node2 = Node1.ChildNodes[0], 'Added child should match indexed child nodes');
    Node3 := TRtfTreeNode.Create;
    Node2.AppendChild(Node3);
    CheckEquals(1, Node2.ChildNodes.Count, 'Successfuly added one child using AppendChild()');
    Check(Node3 = Node2.ChildNodes[0], 'Added child should match indexed child nodes added using AppendChild()');
  finally
    FreeAndNil(Node1);
  end;
end;

procedure TTestRtfTreeNode.TestStringRepresentation;
var
  Node1, Node2: TRtfTreeNode;

begin
  Node1 := TRtfTreeNode.Create(ntKeyword, 'b', True, 3);
  Node2 := TRtfTreeNode.Create(ntRoot, '', False, 0);
  try
    CheckEquals('[Keyword, b, True, 3]', Node1.ToString, 'ToString of node matched');
    CheckEquals('[Root, , False, 0]', Node2.ToString, 'ToString of node matched');
  finally
    FreeAndNil(Node2);
    FreeAndNil(Node1);
  end;
end;

procedure TTestRtfTreeNode.TestCreateText;
var
  Nodes: TRtfTreeNodeCollection;
  RtfTree: TRtfTree;
  AText: String;

begin
  AText := 'Test Doc. {Петяв ñáéíó}'#13#10;
  Nodes := TRtfTreeNode.CreateText(AText);
  RtfTree := TRtfTree.Create;
  try
    RtfTree.AddMainGroup;
    RtfTree.MainGroup.AppendChild(Nodes);
    RtfTree.SaveToFile(AssetPath + 'res-create-text.txt');
    CheckEquals(19, Nodes.Count, 'CreateText sucessfully creates 19 items');
    Str.LoadFromFile(AssetPath + 'rtf8.txt');
    CheckEquals(Str.Text, RtfTree.Rtf, 'CreateText generated rtf is matched');
  finally
    FreeAndNil(RtfTree);
    FreeAndNil(Nodes);
  end;
end;

procedure TTestRtfTreeNode.TestTextExtraction;
var
  RtfTree: TRtfTree;
  SimpleGroup, NestedGroups, Keyword, Control, Root,
  FontsGroup, GeneratorGroup: TRtfTreeNode;

begin
  RtfTree := TRtfTree.Create;
  try
    RtfTree.LoadFromFile(AssetPath + 'testdoc4.rtf');

    SimpleGroup := RtfTree.MainGroup.SelectSingleGroup('ul');
    NestedGroups := RtfTree.MainGroup.SelectSingleGroup('cf');
    Keyword := RtfTree.MainGroup.SelectSingleChildNode('b');
    Control := RtfTree.MainGroup.SelectSingleChildNode('''');
    Root := RtfTree.RootNode;

    CheckEquals('underline1', SimpleGroup.Text);
    CheckEquals('blue1 luctus. Fusce in interdum ipsum. Cum sociis natoque penatibus et italic1 dis parturient montes, nascetur ridiculus mus.', NestedGroups.Text);
    CheckEquals('', Keyword.Text);
    CheckEquals('é', Control.Text);
    CheckEquals('', Root.Text);

    CheckEquals('underline1', SimpleGroup.RawText);
    CheckEquals('blue1 luctus. Fusce in interdum ipsum. Cum sociis natoque penatibus et italic1 dis parturient montes, nascetur ridiculus mus.', NestedGroups.RawText);
    CheckEquals('', Keyword.RawText);
    CheckEquals('é', Control.RawText);
    CheckEquals('', Root.RawText);

    FontsGroup := RtfTree.MainGroup.SelectSingleGroup('fonttbl');
    GeneratorGroup := RtfTree.MainGroup.SelectSingleGroup('*');

    CheckEquals('', FontsGroup.Text);
    CheckEquals('', GeneratorGroup.Text);

    CheckEquals('Times New Roman;Arial;Arial;', FontsGroup.RawText);
    CheckEquals('Msftedit 5.41.15.1515;', GeneratorGroup.RawText);
  finally
    FreeAndNil(RtfTree);
  end;
end;

procedure TTestRtfTreeNode.TestTextExtractionSpecial;
var
  RtfTree: TRtfTree;

begin
  RtfTree := TRtfTree.Create;
  try
    RtfTree.LoadFromFile(AssetPath + 'testdoc5.rtf');

    CheckEquals('Esto es una ‘prueba’'#13#10#7' y otra “prueba” y otra—prueba.'#13#10, RtfTree.Text);
    CheckEquals('Esto es una ‘prueba’'#13#10#7' y otra “prueba” y otra—prueba.'#13#10, RtfTree.MainGroup.Text);
    CheckEquals('Arial;Msftedit 5.41.15.1515;Esto es una ‘prueba’'#13#10#7' y otra “prueba” y otra—prueba.'#13#10, RtfTree.MainGroup.RawText);
  finally
    FreeAndNil(RtfTree);
  end;
end;

procedure TTestRtfTreeNode.TestTextExtractionUnicode;
var
  RtfTree: TRtfTree;

begin
  RtfTree := TRtfTree.Create;
  try
    RtfTree.LoadFromFile(AssetPath + 'unicodedoc.rtf');

    CheckEquals('Prueba Unicode: Вова Петя'#13#10'Sin ignorar caracteres: Вова Петя'#13#10, RtfTree.Text);
  finally
    FreeAndNil(RtfTree);
  end;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TTestRtfTreeNode.Suite);

end.

