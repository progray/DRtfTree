unit TestRtfSelection;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, StrUtils, Classes, SysUtils, TestRtfBase, RtfTree;

type

  TTestRtfSelection = class(TRtfTestCase)
  strict private
    FRtfTree: TRtfTree;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestSelectChildNodesByType;
    procedure TestSelectNodesByType;
    procedure TestSelectSingleNodeByType;
    procedure TestSelectSingleChildNodeByType;
    procedure TestSelectChildNodesByKeyword;
    procedure TestSelectNodesByKeyword;
    procedure TestSelectSingleNodeByKeyword;
    procedure TestSelectSingleChildNodeByKeyword;
    procedure TestSelectChildNodesByKeywordAndParam;
    procedure TestSelectNodesByKeywordAndParam;
    procedure TestSelectSingleNodeByKeywordAndParam;
    procedure TestSelectSingleChildNodeByKeywordAndParam;
    procedure TestSelectChildGroups;
    procedure TestSelectGroups;
    procedure TestSelectSingleGroup;
    procedure TestSelectSpecialGroups;
    procedure TestSelectSiblings;
  end;

implementation

procedure TTestRtfSelection.SetUp;
begin
  FRtfTree := TRtfTree.Create;
  FRtfTree.LoadFromFile(AssetPath + 'testdoc1.rtf');
end;

procedure TTestRtfSelection.TearDown;
begin
  FreeAndNil(FRtfTree);
end;

procedure TTestRtfSelection.TestSelectChildNodesByType;
var
  List1, List2, List3: TRtfTreeNodeCollection;

begin
  List1 := FRtfTree.MainGroup.SelectChildNodes(ntKeyword);  //48 nodes
  List2 := FRtfTree.MainGroup.SelectChildNodes(ntControl);  //3 nodes
  List3 := FRtfTree.MainGroup.SelectChildNodes(ntGroup);    //3 nodes

  CheckEquals(49, List1.Count);
  CheckEquals(3, List2.Count);
  CheckEquals(3, List3.Count);

  Check(List1[5] = FRtfTree.MainGroup[8]);  //viewkind
  CheckEquals('lang', List1[22].NodeKey);   //lang3082

  Check(List2[0] = FRtfTree.MainGroup[45]); //'233
  Check(List2[1] = FRtfTree.MainGroup[47]); //'241
  CheckEquals(241, List2[1].Parameter);     //'241

  Check(List3[0] = FRtfTree.MainGroup[5]);
  CheckEquals('fonttbl', List3[0].FirstChild.NodeKey);
  Check(List3[1] = FRtfTree.MainGroup[6]);
  CheckEquals('colortbl', List3[1].FirstChild.NodeKey);
  Check(List3[2] = FRtfTree.MainGroup[7]);
  CheckEquals('*', List3[2].ChildNodes[0].NodeKey);
  CheckEquals('generator', List3[2].ChildNodes[1].NodeKey);
end;

procedure TTestRtfSelection.TestSelectNodesByType;
var
  List1, List2, List3: TRtfTreeNodeCollection;

begin
  List1 := FRtfTree.MainGroup.SelectNodes(ntKeyword);  //68 nodes
  List2 := FRtfTree.MainGroup.SelectNodes(ntControl);  //4 nodes
  List3 := FRtfTree.MainGroup.SelectNodes(ntGroup);    //6 nodes

  CheckEquals(69, List1.Count);
  CheckEquals(4, List2.Count);
  CheckEquals(6, List3.Count);

  Check(List1[5] = FRtfTree.MainGroup[5].FirstChild);     //fonttbl
  Check(List1[22] = FRtfTree.MainGroup[6].ChildNodes[7]); //green0
  CheckEquals('green', List1[22].NodeKey);                //green0

  Check(List2[0] = FRtfTree.MainGroup[7].FirstChild); //* generator
  Check(List2[1] = FRtfTree.MainGroup[45]); //'233
  Check(List2[2] = FRtfTree.MainGroup[47]); //'241
  CheckEquals(241, List2[2].Parameter);     //'241

  Check(List3[0] = FRtfTree.MainGroup[5]);
  CheckEquals('fonttbl', List3[0].FirstChild.NodeKey);
  Check(List3[3] = FRtfTree.MainGroup[5].ChildNodes[3]);
  CheckEquals('f', List3[3].FirstChild.NodeKey);
  CheckEquals(2, List3[3].FirstChild.Parameter);
  Check(List3[5] = FRtfTree.MainGroup[7]);
  CheckEquals('*', List3[5].ChildNodes[0].NodeKey);
  CheckEquals('generator', List3[5].ChildNodes[1].NodeKey);
end;

procedure TTestRtfSelection.TestSelectSingleNodeByType;
var
  Node1, Node2, Node3: TRtfTreeNode;

begin
  Node1 := FRtfTree.MainGroup.SelectSingleNode(ntKeyword); //rtf1
  Node2 := FRtfTree.MainGroup.SelectSingleNode(ntControl); //* generator
  Node3 := FRtfTree.MainGroup.SelectSingleNode(ntGroup);   //fonttbl

  Check(Node1 = FRtfTree.MainGroup[0]);
  CheckEquals('rtf', Node1.NodeKey);
  Check(Node2 = FRtfTree.MainGroup[7].ChildNodes[0]);
  CheckEquals('*', Node2.NodeKey);
  CheckEquals('generator', Node2.NextSibling.NodeKey);
  Check(Node3 = FRtfTree.MainGroup[5]);
  CheckEquals('fonttbl', Node3.FirstChild.NodeKey);
end;

procedure TTestRtfSelection.TestSelectSingleChildNodeByType;
var
  Node1, Node2, Node3: TRtfTreeNode;

begin
  Node1 := FRtfTree.MainGroup.SelectSingleChildNode(ntKeyword); //rtf1
  Node2 := FRtfTree.MainGroup.SelectSingleChildNode(ntControl); //'233
  Node3 := FRtfTree.MainGroup.SelectSingleChildNode(ntGroup);   //fonttbl

  Check(Node1 = FRtfTree.MainGroup[0]);
  CheckEquals('rtf', Node1.NodeKey);
  Check(Node2 = FRtfTree.MainGroup[45]);
  CheckEquals('''', Node2.NodeKey);
  CheckEquals(233, Node2.Parameter);
  Check(Node3 = FRtfTree.MainGroup[5]);
  CheckEquals('fonttbl', Node3.FirstChild.NodeKey);
end;

procedure TTestRtfSelection.TestSelectChildNodesByKeyword;
var
  List1, List2: TRtfTreeNodeCollection;

begin
  List1 := FRtfTree.MainGroup.SelectChildNodes('fs');  //5 nodes
  List2 := FRtfTree.MainGroup.SelectChildNodes('f');   //3 nodes

  CheckEquals(5, List1.Count);
  CheckEquals(3, List2.Count);

  Check(List1[0] = FRtfTree.MainGroup[17]);
  Check(List1[1] = FRtfTree.MainGroup[22]);
  Check(List1[2] = FRtfTree.MainGroup[25]);
  Check(List1[3] = FRtfTree.MainGroup[43]);
  Check(List1[4] = FRtfTree.MainGroup[77]);

  Check(List2[0] = FRtfTree.MainGroup[16]);
  Check(List2[1] = FRtfTree.MainGroup[56]);
  Check(List2[2] = FRtfTree.MainGroup[76]);
end;

procedure TTestRtfSelection.TestSelectNodesByKeyword;
var
  List1, List2: TRtfTreeNodeCollection;

begin
  List1 := FRtfTree.MainGroup.SelectNodes('fs');  //5 nodes
  List2 := FRtfTree.MainGroup.SelectNodes('f');   //6 nodes

  CheckEquals(5, List1.Count);
  CheckEquals(6, List2.Count);

  Check(List1[0] = FRtfTree.MainGroup[17]);
  Check(List1[1] = FRtfTree.MainGroup[22]);
  Check(List1[2] = FRtfTree.MainGroup[25]);
  Check(List1[3] = FRtfTree.MainGroup[43]);
  Check(List1[4] = FRtfTree.MainGroup[77]);

  Check(List2[0] = FRtfTree.MainGroup[5].ChildNodes[1].FirstChild);
  Check(List2[1] = FRtfTree.MainGroup[5].ChildNodes[2].FirstChild);
  Check(List2[2] = FRtfTree.MainGroup[5].ChildNodes[3].FirstChild);
  Check(List2[3] = FRtfTree.MainGroup[16]);
  Check(List2[4] = FRtfTree.MainGroup[56]);
  Check(List2[5] = FRtfTree.MainGroup[76]);
end;

procedure TTestRtfSelection.TestSelectSingleNodeByKeyword;
var
  Node1, Node2: TRtfTreeNode;

begin
  Node1 := FRtfTree.MainGroup.SelectSingleNode('fs');
  Node2 := FRtfTree.MainGroup.SelectSingleNode('f');

  Check(Node1 = FRtfTree.MainGroup[17]);
  Check(Node2 = FRtfTree.MainGroup[5].ChildNodes[1].FirstChild);
end;

procedure TTestRtfSelection.TestSelectSingleChildNodeByKeyword;
var
  Node1, Node2: TRtfTreeNode;

begin
  Node1 := FRtfTree.MainGroup.SelectSingleChildNode('fs');
  Node2 := FRtfTree.MainGroup.SelectSingleChildNode('f');

  Check(Node1 = FRtfTree.MainGroup[17]);
  Check(Node2 = FRtfTree.MainGroup[16]);
end;

procedure TTestRtfSelection.TestSelectChildNodesByKeywordAndParam;
var
  List1, List2: TRtfTreeNodeCollection;

begin
  List1 := FRtfTree.MainGroup.SelectChildNodes('fs', 24);  //2 nodes
  List2 := FRtfTree.MainGroup.SelectChildNodes('f', 1);    //1 nodes

  CheckEquals(2, List1.Count);
  CheckEquals(1, List2.Count);

  Check(List1[0] = FRtfTree.MainGroup[22]);
  Check(List1[1] = FRtfTree.MainGroup[43]);

  Check(List2[0] = FRtfTree.MainGroup[56]);
end;

procedure TTestRtfSelection.TestSelectNodesByKeywordAndParam;
var
  List1, List2: TRtfTreeNodeCollection;

begin
  List1 := FRtfTree.MainGroup.SelectNodes('fs', 24);  //2 nodes
  List2 := FRtfTree.MainGroup.SelectNodes('f', 1);    //2 nodes

  CheckEquals(2, List1.Count);
  CheckEquals(2, List2.Count);

  Check(List1[0] = FRtfTree.MainGroup[22]);
  Check(List1[1] = FRtfTree.MainGroup[43]);

  Check(List2[0] = FRtfTree.MainGroup[5].ChildNodes[2].FirstChild);
  Check(List2[1] = FRtfTree.MainGroup[56]);
end;

procedure TTestRtfSelection.TestSelectSingleNodeByKeywordAndParam;
var
  Node1, Node2: TRtfTreeNode;

begin
  Node1 := FRtfTree.MainGroup.SelectSingleNode('fs', 24);
  Node2 := FRtfTree.MainGroup.SelectSingleNode('f', 1);

  Check(Node1 = FRtfTree.MainGroup[22]);
  Check(Node2 = FRtfTree.MainGroup[5].ChildNodes[2].FirstChild);
end;

procedure TTestRtfSelection.TestSelectSingleChildNodeByKeywordAndParam;
var
  Node1, Node2: TRtfTreeNode;

begin
  Node1 := FRtfTree.MainGroup.SelectSingleChildNode('fs', 24);
  Node2 := FRtfTree.MainGroup.SelectSingleChildNode('f', 1);

  Check(Node1 = FRtfTree.MainGroup[22]);
  Check(Node2 = FRtfTree.MainGroup[56]);
end;

procedure TTestRtfSelection.TestSelectChildGroups;
var
  List1, List2: TRtfTreeNodeCollection;

begin
  List1 := FRtfTree.MainGroup.SelectChildGroups('colortbl');  //1 node
  List2 := FRtfTree.MainGroup.SelectChildGroups('f');         //0 nodes

  CheckEquals(1, List1.Count);
  CheckEquals(0, List2.Count);

  Check(List1[0] = FRtfTree.MainGroup[6]);
end;

procedure TTestRtfSelection.TestSelectGroups;
var
  List1, List2: TRtfTreeNodeCollection;

begin
  List1 := FRtfTree.MainGroup.SelectGroups('colortbl');  //1 node
  List2 := FRtfTree.MainGroup.SelectGroups('f');         //3 nodes

  CheckEquals(1, List1.Count);
  CheckEquals(3, List2.Count);

  Check(List1[0] = FRtfTree.MainGroup[6]);

  Check(List2[0] = FRtfTree.MainGroup[5].ChildNodes[1]);
  Check(List2[1] = FRtfTree.MainGroup[5].ChildNodes[2]);
  Check(List2[2] = FRtfTree.MainGroup[5].ChildNodes[3]);
end;

procedure TTestRtfSelection.TestSelectSingleGroup;
var
  Node1, Node2: TRtfTreeNode;

begin
  Node1 := FRtfTree.MainGroup.SelectSingleGroup('f');
  Node2 := FRtfTree.MainGroup[5].SelectSingleChildGroup('f');

  Check(Node1 = FRtfTree.MainGroup[5].ChildNodes[1]);
  Check(Node2 = FRtfTree.MainGroup[5].ChildNodes[1]);
end;

procedure TTestRtfSelection.TestSelectSpecialGroups;
var
  List1, List2, List3, List4, List5, List6: TRtfTreeNodeCollection;
  Node1, Node2, Node3, Node4, Node5, Node6: TRtfTreeNode;

begin
  List1 := FRtfTree.MainGroup.SelectChildGroups('generator');
  List2 := FRtfTree.MainGroup.SelectChildGroups('generator', False);
  List3 := FRtfTree.MainGroup.SelectChildGroups('generator', True);

  List4 := FRtfTree.MainGroup.SelectGroups('generator');
  List5 := FRtfTree.MainGroup.SelectGroups('generator', False);
  List6 := FRtfTree.MainGroup.SelectGroups('generator', True);

  Node1 := FRtfTree.MainGroup.SelectSingleChildGroup('generator');
  Node2 := FRtfTree.MainGroup.SelectSingleChildGroup('generator', False);
  Node3 := FRtfTree.MainGroup.SelectSingleChildGroup('generator', True);

  Node4 := FRtfTree.MainGroup.SelectSingleGroup('generator');
  Node5 := FRtfTree.MainGroup.SelectSingleGroup('generator', False);
  Node6 := FRtfTree.MainGroup.SelectSingleGroup('generator', True);

  CheckEquals(0, List1.Count);
  CheckEquals(0, List2.Count);
  CheckEquals(1, List3.Count);

  CheckEquals(0, List4.Count);
  CheckEquals(0, List5.Count);
  CheckEquals(1, List6.Count);

  Check(Node1 = nil);
  Check(Node2 = nil);
  Check(Node3 <> nil);

  Check(Node4 = nil);
  Check(Node5 = nil);
  Check(Node6 <> nil);
end;

procedure TTestRtfSelection.TestSelectSiblings;
var
  Node1, Node2: TRtfTreeNode;
  n1, n2, n3, n4, n5, n6: TRtfTreeNode;

begin
  Node1 := FRtfTree.MainGroup.ChildNodes[4];               //deflang3082
  Node2 := FRtfTree.MainGroup.ChildNodes[6].ChildNodes[2]; //colortbl/red

  n1 := Node1.SelectSibling(ntGroup);
  n2 := Node1.SelectSibling('viewkind');
  n3 := Node1.SelectSibling('fs', 28);

  n4 := Node2.SelectSibling(ntKeyword);
  n5 := Node2.SelectSibling('blue');
  n6 := Node2.SelectSibling('red', 255);

  Check(n1 = FRtfTree.MainGroup[5]);
  Check(n2 = FRtfTree.MainGroup[8]);
  Check(n3 = FRtfTree.MainGroup[17]);

  Check(n4 = FRtfTree.MainGroup[6].ChildNodes[3]);
  Check(n5 = FRtfTree.MainGroup[6].ChildNodes[4]);
  Check(n6 = FRtfTree.MainGroup[6].ChildNodes[6]);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TTestRtfSelection.Suite);

end.

