unit TestRtfDoc;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, StrUtils, Classes, SysUtils, UITypes, Vcl.Graphics,
  TestRtfBase, RtfDoc, RtfClasses;

type

  TTestRtfDocument = class(TRtfTestCase)
  strict private
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestCreateSimpleDocument;
    procedure TestCreateImageDocument;
  end;

implementation

procedure TTestRtfDocument.SetUp;
begin
end;

procedure TTestRtfDocument.TearDown;
begin
end;

procedure TTestRtfDocument.TestCreateSimpleDocument;
var
  ADoc: TRtfDocument;
  AFont: TFont;
  AParagraph: TRtfParagraph;
  Text1, Text2, RtfCode1, RtfCode2: String;

begin
  ADoc := TRtfDocument.Create;
  AFont := TFont.Create;
  AParagraph := TRtfParagraph.Create;
  try
    ADoc.Generator := 'NRtfTree Library 0.3.0';
    ADoc.LocaleID := 3082;
    ADoc.AddClosingParagraph := True;

    AFont.Name := 'Arial';
    AFont.Color := TColors.Darkblue;
    AFont.Style := AFont.Style + [fsUnderline, fsBold];
    AFont.Size := 10;
    ADoc.UpdateFont(AFont);

    AParagraph.Alignment := taJustified;
    ADoc.UpdateParagraph(AParagraph);

    ADoc.AddText('First Paragraph');
    ADoc.AddNewParagraph(2);

    ADoc.SetFontBold(False);
    ADoc.SetFontUnderline(False);
    ADoc.SetFontColor(TColors.Red);

    ADoc.AddText('Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer quis eros at tortor pharetra laoreet. Donec tortor diam, imperdiet ut porta quis, congue eu justo.');
    ADoc.AddText('Quisque viverra tellus id mauris tincidunt luctus. Fusce in interdum ipsum. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.');
    ADoc.AddText('Donec ac leo justo, vitae rutrum elit. Nulla tellus elit, imperdiet luctus porta vel, consectetur quis turpis. Nam purus odio, dictum vitae sollicitudin nec, tempor eget mi.');
    ADoc.AddText('Etiam vitae porttitor enim. Aenean molestie facilisis magna, quis tincidunt leo placerat in. Maecenas malesuada eleifend nunc vitae cursus.');
    ADoc.AddNewParagraph(2);

    ADoc.Save(AssetPath + 'rtfdocument1.rtf');

    Text1 := ADoc.Text;
    RtfCode1 := ADoc.Rtf;

    ADoc.AddText('Second Paragraph', AFont);
    ADoc.AddNewParagraph(2);

    AFont.Name := 'Courier New';
    AFont.Color := TColors.Green;
    AFont.Style := AFont.Style - [fsUnderline, fsBold];
    ADoc.UpdateFont(AFont);

    ADoc.SetParagraphAlignment(taLeft);
    ADoc.SetParagraphLeftIndent(2);
    ADoc.SetParagraphRightIndent(2);

    ADoc.AddText('Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer quis eros at tortor pharetra laoreet. Donec tortor diam, imperdiet ut porta quis, congue eu justo.');
    ADoc.AddText('Quisque viverra tellus id mauris tincidunt luctus. Fusce in interdum ipsum. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.');
    ADoc.AddText('Donec ac leo justo, vitae rutrum elit. Nulla tellus elit, imperdiet luctus porta vel, consectetur quis turpis. Nam purus odio, dictum vitae sollicitudin nec, tempor eget mi.');
    ADoc.AddText('Etiam vitae porttitor enim. Aenean molestie facilisis magna, quis tincidunt leo placerat in. Maecenas malesuada eleifend nunc vitae cursus.');
    ADoc.AddNewParagraph(2);

    ADoc.UpdateFont(AFont);
    ADoc.SetFontUnderline(False);
    ADoc.SetFontItalic(True);
    ADoc.SetFontColor(TColors.DarkBlue);

    ADoc.SetParagraphLeftIndent(0);

    ADoc.AddText('Test Doc. Петяв ñáéíó'#13#10);
    ADoc.AddNewLine(1);
    ADoc.AddText(#7'Stop.');

    Text2 := ADoc.Text;
    RtfCode2 := ADoc.Rtf;

    ADoc.Save(AssetPath + 'rtfdocument2.rtf');

    Str.LoadFromFile(AssetPath + 'rtf6.txt');
    CheckEquals(Str.Text, RtfCode1, 'RtfDocument generated content matched');
    Str.LoadFromFile(AssetPath + 'rtf4.txt');
    CheckEquals(Str.Text, RtfCode2, 'RtfDocument (unicode) generated content matched');

    Str.LoadFromFile(AssetPath + 'doctext1.txt');
    CheckEquals(Str.Text, Text1, 'RtfDocument generated text matched');
    Str.LoadFromFile(AssetPath + 'doctext2.txt');
    CheckEquals(Str.Text + ' Петяв ñáéíó'#13#10#13#10#7'Stop.'#13#10, Text2, 'RtfDocument generated text matched');
  finally
    FreeAndNil(AParagraph);
    FreeAndNil(AFont);
    FreeAndNil(ADoc);
  end;
end;

procedure TTestRtfDocument.TestCreateImageDocument;
var
  ADoc: TRtfDocument;
  AFont: TFont;
  RtfCode: String;

begin
  ADoc := TRtfDocument.Create;
  AFont := TFont.Create;
  try
    AFont.Name := 'Arial';
    AFont.Size := 10;
    ADoc.UpdateFont(AFont);

    ADoc.AddText('Image Sample');
    ADoc.AddNewParagraph;
    ADoc.AddImage(AssetPath + 'image1.png', 0, 0, 100, 100);

    RtfCode := ADoc.Rtf;
    ADoc.Save(AssetPath + 'rtfdocument3.rtf');

    Str.LoadFromFile(AssetPath + 'rtf7.txt');
    CheckEquals(Str.Text, RtfCode, 'RtfDocument with image generated content matched');
  finally
    FreeAndNil(AFont);
    FreeAndNil(ADoc);
  end;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TTestRtfDocument.Suite);

end.

