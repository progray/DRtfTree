unit TestRtfReplace;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, StrUtils, Classes, SysUtils, DateUtils, UITypes, TestRtfBase,
  RtfTree, RtfClasses;

type

  TTestRtfReplace = class(TRtfTestCase)
  strict private
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestFindText;
    procedure TestReplaceText;
    procedure TestReplaceTextEx;
  end;

implementation

procedure TTestRtfReplace.SetUp;
begin
end;

procedure TTestRtfReplace.TearDown;
begin
end;

procedure TTestRtfReplace.TestFindText;
var
  RtfTree: TRtfTree;
  List1: TRtfTreeNodeCollection;

begin
  RtfTree := TRtfTree.Create;
  try
    RtfTree.LoadFromFile(AssetPath + 'testdoc1.rtf');
    List1 := RtfTree.MainGroup.FindText('Italic');

    CheckEquals(2, List1.Count, 'Find for "Italic" has 2 occurance');

    Check(List1[0] = RtfTree.MainGroup[18], 'Node matched for occurance 1');
    CheckEquals('Bold Italic Underline Size 14', List1[0].NodeKey, 'First occurance matched');

    Check(List1[1] = RtfTree.MainGroup[73], 'Node matched for occurance 2');
    CheckEquals('Italic2', List1[1].NodeKey, '2nd occurance matched');
  finally
    FreeAndNil(RtfTree);
  end;
end;

procedure TTestRtfReplace.TestReplaceText;
var
  RtfTree: TRtfTree;

begin
  RtfTree := TRtfTree.Create;
  try
    RtfTree.LoadFromFile(AssetPath + 'testdoc1.rtf');

    RtfTree.MainGroup.ReplaceText('Italic', 'REPLACED');

    Str.LoadFromFile(AssetPath + 'rtf2.txt');
    CheckEquals(Str.Text, RtfTree.Rtf, 'Replaced rtf matched');
  finally
    FreeAndNil(RtfTree);
  end;
end;

procedure TTestRtfReplace.TestReplaceTextEx;
var
  RtfTree: TRtfTree;

begin
  RtfTree := TRtfTree.Create;
  try
    RtfTree.IgnoreWhitespace := False;
    RtfTree.LoadFromFile(AssetPath + 'testdoc6.rtf');
    CheckEquals(True, RtfTree.MainGroup.ReplaceTextEx('<TAG1>', 'Tag 1'), 'Sucessfuly replaced tag whithin single node');
    CheckEquals(True, RtfTree.MainGroup.ReplaceTextEx('<TAG2>', 'Tag 2'), 'Sucessfuly replaced tag adjacent to previous tag');
    CheckEquals(True, RtfTree.MainGroup.ReplaceTextEx('<THIS_IS_A_TAG>', '{Replace TAG}'), 'Sucessfuly replaced tag across nodes');
    CheckEquals(True, RtfTree.MainGroup.ReplaceTextEx('<REPLACE_ME>', 'Петяв ñáéíó'), 'Sucessfuly replaced encoded text');
    Str.LoadFromFile(AssetPath + 'rtf9.txt');
    CheckEquals(Str.Text, RtfTree.Rtf, 'Replaced content matched');
  finally
    FreeAndNil(RtfTree);
  end;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TTestRtfReplace.Suite);

end.

